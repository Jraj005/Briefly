fimport streamlit as st
from PIL import Image
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen
from newspaper import Article
import io
import nltk
import requests
from io import BytesIO

# Download necessary NLTK resources
nltk.download('punkt')

st.set_page_config(page_title='Briefly: The world in a nutshell', page_icon="üì∞")

# Custom CSS styles without Streamlit's autogenerated classes
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Merriweather:wght@400;700&family=Roboto:wght@400;700&display=swap');

    html, body {
        font-family: 'Roboto', sans-serif;
        font-size: 16px;
        background-color: #f4f4f4;
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: 'Merriweather', serif;
    }

    p {
        font-size: 18px;
        font-family: 'Merriweather', serif;
    }

    .news-card {
        box-shadow: 3px 3px 6px rgba(0,0,0,0.1);
        padding: 15px 20px;
        color: white;
        border-radius: 15px;
        margin: 10px 8px;
        background-color: #252829;
        transition: transform 0.2s ease;
    }

    .news-card:hover {
        transform: scale(1.07);
        z-index: 2;
    }

    .news-wrapper {
        max-width: 60rem;
        margin: 0 auto;
    }

    .news-image {
        height: 40vh;
        width: 100%;
        object-fit: cover;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .read-more-expander {
        background-color: white;
        color: black;
        border-radius: 20px;
        padding: 10px;
        font-size: 16px;
    }

    .news-title {
        font-weight: 700;
        margin-bottom: 8px;
    }

    </style>
""", unsafe_allow_html=True)


def fetch_news_search_topic(topic, lang):
    try:
        site = f'https://news.google.com/rss/search?q={topic}&hl={lang}'
        op = urlopen(site)
        rd = op.read()
        op.close()
        sp_page = soup(rd, 'xml')
        news_list = sp_page.find_all('item')
        return news_list
    except Exception as e:
        st.error(f"Error fetching news: {e}")
        return []


def fetch_top_news(lang):
    try:
        site = f'https://news.google.com/news/rss?hl={lang}&gl=IN'
        op = urlopen(site)
        rd = op.read()
        op.close()
        sp_page = soup(rd, 'xml')
        news_list = sp_page.find_all('item')
        return news_list
    except Exception as e:
        st.error(f"Error fetching top news: {e}")
        return []


def fetch_category_news(topic, lang):
    try:
        site = f'https://news.google.com/news/rss/headlines/section/topic/{topic}?hl={lang}'
        op = urlopen(site)
        rd = op.read()
        op.close()
        sp_page = soup(rd, 'xml')
        news_list = sp_page.find_all('item')
        return news_list
    except Exception as e:
        st.error(f"Error fetching category news: {e}")
        return []


def fetch_news_poster(poster_link):
    try:
        u = urlopen(poster_link)
        raw_data = u.read()
        image = Image.open(io.BytesIO(raw_data))
        return image
    except Exception:
        return Image.open('./Meta/no_image.jpg')


def display_news(list_of_news, news_quantity):
    c = 0
    cols = st.columns(3)
    for news in list_of_news:
        if c % 3 == 0 and c != 0:
            cols = st.columns(3)

        with cols[c % 3]:
            st.markdown('<div class="news-card">', unsafe_allow_html=True)

            # News Title
            st.markdown(f'<div class="news-title">{news.title.text}</div>', unsafe_allow_html=True)

            # Fetch and show news image if possible
            # You could add image fetch here if you want

            news_data = Article(news.link.text)
            try:
                news_data.download()
                news_data.parse()
                news_data.nlp()
            except Exception as e:
                st.error(f"Error processing article: {e}")
                st.markdown('</div>', unsafe_allow_html=True)
                continue

            with st.expander("Read More"):
                st.markdown('<div class="read-more-expander">', unsafe_allow_html=True)
                st.markdown(f"<p style='text-align: justify;'>{news_data.summary}</p>", unsafe_allow_html=True)
                st.markdown(f"[Read more at {news.source.text}]({news.link.text})")
                st.success("Published Date: " + news.pubDate.text)
                st.markdown('</div>', unsafe_allow_html=True)

            st.markdown('</div>', unsafe_allow_html=True)

        c += 1
        if c >= news_quantity:
            break


def run():
    st.title("BRIEFLY: THE WORLD IN A NUTSHELL")

    # Logo
    logo_url = "https://drive.google.com/uc?id=1LhZ97smrzmOk9hvaluEv-vupnuK0RHlX"
    logo_response = requests.get(logo_url)
    logo_image = Image.open(BytesIO(logo_response.content))
    st.image(logo_image, width=300)

    # Language Selection
    lang_options = {
        'English': 'en',
        '‡§π‡§ø‡§Ç‡§¶‡•Ä': 'hi',
        '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ': 'bn',
        '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä': 'gu',
        '‡≤ï‡≤®‡≥ç‡≤®‡≤°': 'kn',
        '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç': 'ml',
        '‡§Æ‡§∞‡§æ‡§†‡•Ä': 'mr',
        '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç': 'ta',
        '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å': 'te',
        '‡§â‡§∞‡•ç‡§¶‡•Ç': 'ur'
    }
    selected_lang = st.selectbox("Select Language", list(lang_options.keys()))

    category = ['Trendingüî• News', 'Favouriteüíô Topics', 'Searchüîç Topic']
    cat_op = st.selectbox('Select your Category', category)

    if cat_op == category[0]:
        st.subheader("‚úÖ Here is the Trendingüî• news for you")
        no_of_news = 21
        news_list = fetch_top_news(lang_options[selected_lang])
        display_news(news_list, no_of_news)

    elif cat_op == category[1]:
        av_topics = ['Choose Topic', 'WORLD', 'NATION', 'BUSINESS', 'TECHNOLOGY', 'ENTERTAINMENT', 'SPORTS', 'SCIENCE', 'HEALTH']
        st.subheader("Choose your favourite Topic")
        chosen_topic = st.selectbox("Choose your favourite Topic", av_topics)
        if chosen_topic == av_topics[0]:
            st.warning("Please Choose the Topic")
        else:
            no_of_news = 21
            news_list = fetch_category_news(chosen_topic, lang_options[selected_lang])
            if news_list:
                st.subheader(f"‚úÖ Here are some {chosen_topic} News for you")
                display_news(news_list, no_of_news)
            else:
                st.error(f"No News found for {chosen_topic}")

    elif cat_op == category[2]:
        user_topic = st.text_input("Enter your Topicüîç")
        no_of_news = 21

        if st.button("Search") and user_topic != '':
            user_topic_pr = user_topic.replace(' ', '')
            news_list = fetch_news_search_topic(topic=user_topic_pr, lang=lang_options[selected_lang])
            if news_list:
                st.subheader(f"‚úÖ Here are some News related to {user_topic.capitalize()} for you")
                display_news(news_list, no_of_news)
            else:
                st.error(f"No News found for {user_topic}")
        else:
            st.warning("Please write Topic Name to Searchüîç")


if __name__ == "__main__":
    run()
